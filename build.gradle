plugins {
    id 'java'
    id 'jacoco'
    id 'org.springframework.boot' version '3.4.0'
    id 'io.spring.dependency-management' version '1.1.6'
    id "org.sonarqube" version "4.4.1.3373"
}

repositories {
    mavenCentral()
    mavenLocal()
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.sonarqube'

    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    repositories {
        mavenCentral()
        mavenLocal()
    }

    dependencyManagement {
        imports {
            mavenBom 'org.springframework.boot:spring-boot-dependencies:3.4.0'
        }
        dependencies {
            dependency 'org.apache.logging.log4j:log4j-core:2.24.2'
        }
    }
    //dependencias globales transversales todos los modulos
    dependencies {
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'org.mockito:mockito-core:5.14.2'
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
        implementation 'org.apache.logging.log4j:log4j-api:2.24.2'
        implementation 'org.apache.logging.log4j:log4j-core:2.24.2'


    }

    jacoco {
        toolVersion = '0.8.9'
    }

    jacocoTestReport {
        reports {
            xml.required = true
            csv.required = false
            html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
        }
    }

    plugins.withType(JacocoPlugin).configureEach {
        tasks["test"].finalizedBy 'jacocoTestReport'
    }

    test {
        useJUnitPlatform()
        if (project.hasProperty("excludeTests")) {
            exclude project.property('excludeTests')
        }
        reports.junitXml.outputLocation = layout.buildDirectory.dir('test-results')
    }

    sonarqube {
        properties {
            property "sonar.language","java"
            property "sonar.junit.reportsPath","build/test-results"
            property "sonar.coverage.jacoco.xmlReportPaths","build/reports/jacoco/test/jacocoTestReport.xml"
            property "sonar.java.binaries","build/classes"
            property "sonar.sources","src/main/java"
        }
    }

}

// configuracion de sonarqube
sonarqube {
    properties {
        property "sonar.projectName", "${sonar_project_name}"
        property "sonar.projectKey", "${sonar_project_key}"
        property "sonar.projectVersion","${version}"
        property "sonar.sourceEncoding","UTF-8"
    }
}

task pathingJar(type: Jar) {
    dependsOn configurations.runtimeClasspath
    archiveAppendix = 'pathing'

    doFirst {
        manifest {
            attributes "Class-Path": configurations.runtimeClasspath.files.collect {
                it.toURI().toURL().toString().replaceFirst("file:/", '/')
            }.join(' ')
            attributes 'Main-Class': 'co.com.proteccion.MainApplication'
        }
    }
}

bootRun {
    dependsOn pathingJar
    doFirst {
        classpath = files("$layout.buildDirectory/classes/java/main", "$layout.buildDirectory/resources/main", pathingJar.archivePath)
    }
    //args = ["--spring.profiles.active=" + profiles]
}

bootJar {
    archiveBaseName = "${microservice_name}"
}
springBoot {
    mainClass = 'co.com.edwinmarrugo.planningpoker.microservice.MainApplication'
}

